<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myCommunity.comment.CommentMapper">

	<!-- 댓글 조회 -->
	<select id="commentList" resultType="CommentVo">
		select
			id, board_id, user_nickname, contents, group_id, dep, create_time, modify_time, delete_time
		from comments
		where board_id = #{id}
		and dep = 0
		order by id ASC
	</select>
	
	<!-- 대댓글 조회 -->
	<select id="replyList" resultType="CommentVo">
		select
			id, board_id, user_nickname, contents, group_id, dep, create_time, modify_time, delete_time
		from comments
		where board_id = #{id}
		and dep = 1
		order by id ASC
	</select>
	
	<!-- 댓글 조회(삭제된 댓글) -->
	<select id="commentListdelete" resultType="CommentVo">
		select
			id, board_id, user_nickname, contents, modify_time
		from comments
		where board_id = #{id}
		and
		delete_time is null
		order by id ASC
	</select>
	
	
	<!-- 특정 댓글 조회 -->
	<select id="findById" resultType="CommentVo">
		select id, board_id, user_nickname, contents, group_id, dep, create_time, modify_time, delete_time 
		from comments
		where id = #{id} and delete_time is null
	</select>
	
	<!-- 게시글 댓글 갯수 -->
	<select id="commentsCount" resultType="int">
		select count(*)
		from comments
		where board_id = #{id}
		and
		delete_time is null
	</select>
	
	<!-- 댓글 작성 -->
	<insert id="commentCreate" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO comments(board_id, user_nickname, contents, create_time)
			VALUES (#{boardId}, #{userNickName}, #{contents}, #{createTime})
	</insert>
	<!-- 대댓글 작성 -->
	<insert id="replyCreate" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO comments(board_id, user_nickname, contents, group_id, dep, create_time)
			VALUES (#{boardId}, #{userNickName}, #{contents}, #{groupId}, #{dep}, #{createTime})
	</insert>
		
	<!-- 댓글 수정 -->
	<update id="commentModify" parameterType="CommentVo">
		update comments
		set contents = #{commentVo.contents},
			modify_time = #{commentVo.modifyTime}
		where id = #{commentVo.id}
			<!-- and user_nickname = #{commentVo.userNickName} -->	
	</update>
	
	<!-- 댓글 삭제 -->
	<update id="commentDelete" parameterType="CommentVo">
		update comments
			set delete_time = #{commentVo.deleteTime}
		where id = #{commentVo.id}
	</update>
	
	<!-- 탈퇴 회원 댓글 삭제 -->
	<update id="commentUserDelete" parameterType="CommentVo">
		update comments
			set delete_time = #{commentVo.deleteTime}
		where user_nickname = #{commentVo.userNickName}
	</update>
	
	
	<!-- 게시글 등록 후 scr위치-->
	<select id="scrPosition" resultType="CommentVo">
		select id, board_id, user_nickname, contents, group_id, dep, create_time, modify_time, delete_time 
		from comments
		where user_nickname = #{nickname}
		order by id DESC limit 1;
	</select>


</mapper>